[0m[[0m[0mdebug[0m] [0m[0mThe oberon.expression.GeExpression has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName($init$,[Default]), UsedName(accept,[Default]), UsedName(GeExpression,[Default]), UsedName(calculateType,[Default]), UsedName(typeCheck,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) oberon.expression.GeExpression: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) oberon.expression.GeExpression.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.expression.TestGeExpression: Set(UsedName(GeExpression,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe oberon.command.Command has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(Command,[Default]), UsedName(typeCheck,[Default]), UsedName(accept,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) oberon.command.Command: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) oberon.command.Command.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.command.TestWhile: Set(UsedName(Command,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.command.TestProcedure: Set(UsedName(Command,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.expression.TestFunction: Set(UsedName(Command,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.command.TestIfThen: Set(UsedName(Command,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.command.TestIfThenElse: Set(UsedName(Command,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe oberon.command.Assignment has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(typeCheck,[Default]), UsedName(Assignment,[Default]), UsedName(accept,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) oberon.command.Assignment: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) oberon.command.Assignment.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.command.TestWhile: Set(UsedName(Assignment,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.command.TestProcedure: Set(UsedName(Assignment,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.expression.TestFunction: Set(UsedName(Assignment,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.command.TestAssignment: Set(UsedName(Assignment,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.command.TestIfThen: Set(UsedName(Assignment,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.command.TestIfThenElse: Set(UsedName(Assignment,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe oberon.expression.NotExpression has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName($init$,[Default]), UsedName(accept,[Default]), UsedName(calculateType,[Default]), UsedName(NotExpression,[Default]), UsedName(typeCheck,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) oberon.expression.NotExpression: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) oberon.expression.NotExpression.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.expression.TestNotExpression: Set(UsedName(NotExpression,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe oberon.expression.DivExpression has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName($init$,[Default]), UsedName(accept,[Default]), UsedName(DivExpression,[Default]), UsedName(calculateType,[Default]), UsedName(typeCheck,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) oberon.expression.DivExpression: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) oberon.expression.DivExpression.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.expression.TestDivExpression: Set(UsedName(DivExpression,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe oberon.expression.MultExpression has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName($init$,[Default]), UsedName(accept,[Default]), UsedName(calculateType,[Default]), UsedName(MultExpression,[Default]), UsedName(typeCheck,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) oberon.expression.MultExpression: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) oberon.expression.MultExpression.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.expression.TestMultExpression: Set(UsedName(MultExpression,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe oberon.expression.EqExpression has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName($init$,[Default]), UsedName(accept,[Default]), UsedName(calculateType,[Default]), UsedName(EqExpression,[Default]), UsedName(typeCheck,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) oberon.expression.EqExpression: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) oberon.expression.EqExpression.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.expression.TestEqExpression: Set(UsedName(EqExpression,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe oberon.expression.Function has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName($init$,[Default]), UsedName(accept,[Default]), UsedName(calculateType,[Default]), UsedName(args,[Default]), UsedName(Function,[Default]), UsedName(typeCheck,[Default]), UsedName(name,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) oberon.expression.Function: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) oberon.expression.Function.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.expression.TestFunction: Set(UsedName(Function,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe oberon.command.Return has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(typeCheck,[Default]), UsedName(Return,[Default]), UsedName(accept,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) oberon.command.Return: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) oberon.command.Return.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.expression.TestFunction: Set(UsedName(Return,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe oberon.expression.Expression has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName($init$,[Default]), UsedName(accept,[Default]), UsedName(calculateType,[Default]), UsedName(Expression,[Default]), UsedName(typeCheck,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) oberon.expression.Expression: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) oberon.expression.Expression.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.command.TestWhile: Set(UsedName(Expression,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.command.TestProcedure: Set(UsedName(Expression,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.expression.TestFunction: Set(UsedName(Expression,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.expression.TestAndExpression: Set(UsedName(Expression,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.command.TestAssignment: Set(UsedName(Expression,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.expression.TestEqExpression: Set(UsedName(Expression,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.expression.TestDivExpression: Set(UsedName(Expression,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.expression.TestAddExpression: Set(UsedName(Expression,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.expression.TestSubExpression: Set(UsedName(Expression,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.expression.TestMultExpression: Set(UsedName(Expression,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.expression.TestLoExpression: Set(UsedName(Expression,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.expression.TestOrExpression: Set(UsedName(Expression,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.expression.TestGeExpression: Set(UsedName(Expression,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.expression.TestNotExpression: Set(UsedName(Expression,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.expression.TestLeExpression: Set(UsedName(Expression,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.expression.TestGrExpression: Set(UsedName(Expression,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.expression.TestNeqExpression: Set(UsedName(Expression,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.command.TestIfThen: Set(UsedName(Expression,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.command.TestIfThenElse: Set(UsedName(Expression,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe oberon.expression.Value has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(Value,[Default]), UsedName(typeCheck,[Default]), UsedName(calculateType,[Default]), UsedName(accept,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) oberon.expression.Value: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) oberon.expression.Value.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.command.TestWhile: Set(UsedName(Value,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.command.TestProcedure: Set(UsedName(Value,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.expression.TestFunction: Set(UsedName(Value,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.expression.TestAndExpression: Set(UsedName(Value,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.command.TestAssignment: Set(UsedName(Value,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.expression.TestEqExpression: Set(UsedName(Value,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.expression.TestExpression: Set(UsedName(Value,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.expression.TestDivExpression: Set(UsedName(Value,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.expression.TestAddExpression: Set(UsedName(Value,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.expression.TestSubExpression: Set(UsedName(Value,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.expression.TestMultExpression: Set(UsedName(Value,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.expression.TestLoExpression: Set(UsedName(Value,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.command.TestDeclaration: Set(UsedName(Value,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.expression.TestOrExpression: Set(UsedName(Value,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.expression.TestGeExpression: Set(UsedName(Value,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.expression.TestNotExpression: Set(UsedName(Value,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.expression.TestLeExpression: Set(UsedName(Value,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.expression.TestGrExpression: Set(UsedName(Value,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.expression.TestNeqExpression: Set(UsedName(Value,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.command.TestIfThen: Set(UsedName(Value,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.command.TestIfThenElse: Set(UsedName(Value,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe oberon.expression.IntValue$ has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(typeCheck,[Default]), UsedName(IntValue,[Default]), UsedName(calculateType,[Default]), UsedName(accept,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) oberon.expression.IntValue$: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) oberon.expression.IntValue$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.command.TestWhile: Set(UsedName(IntValue,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.command.TestProcedure: Set(UsedName(IntValue,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.expression.TestFunction: Set(UsedName(IntValue,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.expression.TestAndExpression: Set(UsedName(IntValue,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.command.TestAssignment: Set(UsedName(IntValue,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.expression.TestEqExpression: Set(UsedName(IntValue,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.expression.TestExpression: Set(UsedName(IntValue,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.expression.TestDivExpression: Set(UsedName(IntValue,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.expression.TestAddExpression: Set(UsedName(IntValue,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.expression.TestSubExpression: Set(UsedName(IntValue,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.expression.TestMultExpression: Set(UsedName(IntValue,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.expression.TestLoExpression: Set(UsedName(IntValue,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.expression.TestOrExpression: Set(UsedName(IntValue,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.expression.TestGeExpression: Set(UsedName(IntValue,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.expression.TestLeExpression: Set(UsedName(IntValue,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.expression.TestGrExpression: Set(UsedName(IntValue,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.expression.TestNeqExpression: Set(UsedName(IntValue,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.command.TestIfThen: Set(UsedName(IntValue,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.command.TestIfThenElse: Set(UsedName(IntValue,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe oberon.command.IfThenElse has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(typeCheck,[Default]), UsedName(accept,[Default]), UsedName(IfThenElse,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) oberon.command.IfThenElse: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) oberon.command.IfThenElse.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.command.TestIfThenElse: Set(UsedName(IfThenElse,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe oberon.command.While has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(While,[Default]), UsedName(typeCheck,[Default]), UsedName(accept,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) oberon.command.While: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) oberon.command.While.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.command.TestWhile: Set(UsedName(While,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.expression.TestFunction: Set(UsedName(While,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe oberon.expression.BoolValue$ has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(typeCheck,[Default]), UsedName(calculateType,[Default]), UsedName(accept,[Default]), UsedName(BoolValue,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) oberon.expression.BoolValue$: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) oberon.expression.BoolValue$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.expression.TestAndExpression: Set(UsedName(BoolValue,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.expression.TestEqExpression: Set(UsedName(BoolValue,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.expression.TestLoExpression: Set(UsedName(BoolValue,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.expression.TestOrExpression: Set(UsedName(BoolValue,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.expression.TestGeExpression: Set(UsedName(BoolValue,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.expression.TestNotExpression: Set(UsedName(BoolValue,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.expression.TestLeExpression: Set(UsedName(BoolValue,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.expression.TestGrExpression: Set(UsedName(BoolValue,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.expression.TestNeqExpression: Set(UsedName(BoolValue,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe oberon.FunctionDeclaration has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(accept,[Default]), UsedName(FunctionDeclaration,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) oberon.FunctionDeclaration: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) oberon.FunctionDeclaration.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.expression.TestFunction: Set(UsedName(FunctionDeclaration,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe oberon.command.IfThen has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(typeCheck,[Default]), UsedName(IfThen,[Default]), UsedName(accept,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) oberon.command.IfThen: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) oberon.command.IfThen.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.command.TestIfThen: Set(UsedName(IfThen,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe oberon.expression.GrExpression has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName($init$,[Default]), UsedName(accept,[Default]), UsedName(calculateType,[Default]), UsedName(typeCheck,[Default]), UsedName(GrExpression,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) oberon.expression.GrExpression: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) oberon.expression.GrExpression.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.expression.TestAndExpression: Set(UsedName(GrExpression,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.expression.TestOrExpression: Set(UsedName(GrExpression,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.expression.TestGrExpression: Set(UsedName(GrExpression,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.command.TestIfThenElse: Set(UsedName(GrExpression,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe oberon.expression.AddExpression has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName($init$,[Default]), UsedName(accept,[Default]), UsedName(AddExpression,[Default]), UsedName(calculateType,[Default]), UsedName(typeCheck,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) oberon.expression.AddExpression: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) oberon.expression.AddExpression.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.command.TestWhile: Set(UsedName(AddExpression,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.command.TestProcedure: Set(UsedName(AddExpression,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.expression.TestFunction: Set(UsedName(AddExpression,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.expression.TestEqExpression: Set(UsedName(AddExpression,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.expression.TestAddExpression: Set(UsedName(AddExpression,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.expression.TestLoExpression: Set(UsedName(AddExpression,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.expression.TestGeExpression: Set(UsedName(AddExpression,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.expression.TestLeExpression: Set(UsedName(AddExpression,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.expression.TestGrExpression: Set(UsedName(AddExpression,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.expression.TestNeqExpression: Set(UsedName(AddExpression,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.command.TestIfThen: Set(UsedName(AddExpression,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.command.TestIfThenElse: Set(UsedName(AddExpression,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe oberon.expression.LeExpression has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName($init$,[Default]), UsedName(accept,[Default]), UsedName(LeExpression,[Default]), UsedName(calculateType,[Default]), UsedName(typeCheck,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) oberon.expression.LeExpression: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) oberon.expression.LeExpression.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.command.TestWhile: Set(UsedName(LeExpression,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.expression.TestFunction: Set(UsedName(LeExpression,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.expression.TestLeExpression: Set(UsedName(LeExpression,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe oberon.command.BlockCommand has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(typeCheck,[Default]), UsedName(BlockCommand,[Default]), UsedName(accept,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) oberon.command.BlockCommand: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) oberon.command.BlockCommand.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.command.TestWhile: Set(UsedName(BlockCommand,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.expression.TestFunction: Set(UsedName(BlockCommand,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.command.TestIfThen: Set(UsedName(BlockCommand,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe oberon.expression.OrExpression has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName($init$,[Default]), UsedName(accept,[Default]), UsedName(calculateType,[Default]), UsedName(OrExpression,[Default]), UsedName(typeCheck,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) oberon.expression.OrExpression: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) oberon.expression.OrExpression.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.expression.TestOrExpression: Set(UsedName(OrExpression,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe oberon.VarDeclaration has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(accept,[Default]), UsedName(VarDeclaration,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) oberon.VarDeclaration: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) oberon.VarDeclaration.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.command.TestWhile: Set(UsedName(VarDeclaration,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.command.TestProcedure: Set(UsedName(VarDeclaration,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.command.TestAssignment: Set(UsedName(VarDeclaration,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.command.TestDeclaration: Set(UsedName(VarDeclaration,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.command.TestIfThen: Set(UsedName(VarDeclaration,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.command.TestIfThenElse: Set(UsedName(VarDeclaration,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe oberon.expression.NeqExpression has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName($init$,[Default]), UsedName(accept,[Default]), UsedName(NeqExpression,[Default]), UsedName(calculateType,[Default]), UsedName(typeCheck,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) oberon.expression.NeqExpression: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) oberon.expression.NeqExpression.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.expression.TestNeqExpression: Set(UsedName(NeqExpression,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe oberon.expression.Undefined$ has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(typeCheck,[Default]), UsedName(calculateType,[Default]), UsedName(accept,[Default]), UsedName(Undefined,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) oberon.expression.Undefined$: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) oberon.expression.Undefined$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.command.TestDeclaration: Set(UsedName(Undefined,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe oberon.expression.SubExpression has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName($init$,[Default]), UsedName(accept,[Default]), UsedName(SubExpression,[Default]), UsedName(calculateType,[Default]), UsedName(typeCheck,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) oberon.expression.SubExpression: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) oberon.expression.SubExpression.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.expression.TestFunction: Set(UsedName(SubExpression,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.expression.TestSubExpression: Set(UsedName(SubExpression,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.command.TestIfThenElse: Set(UsedName(SubExpression,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe oberon.expression.LoExpression has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName($init$,[Default]), UsedName(accept,[Default]), UsedName(calculateType,[Default]), UsedName(LoExpression,[Default]), UsedName(typeCheck,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) oberon.expression.LoExpression: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) oberon.expression.LoExpression.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.expression.TestLoExpression: Set(UsedName(LoExpression,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.command.TestIfThen: Set(UsedName(LoExpression,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe oberon.ProcedureDeclaration has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(accept,[Default]), UsedName(ProcedureDeclaration,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) oberon.ProcedureDeclaration: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) oberon.ProcedureDeclaration.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.command.TestProcedure: Set(UsedName(ProcedureDeclaration,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe oberon.expression.VarReference has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName($init$,[Default]), UsedName(accept,[Default]), UsedName(calculateType,[Default]), UsedName(typeCheck,[Default]), UsedName(VarReference,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) oberon.expression.VarReference: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) oberon.expression.VarReference.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.command.TestWhile: Set(UsedName(VarReference,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.command.TestProcedure: Set(UsedName(VarReference,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.expression.TestFunction: Set(UsedName(VarReference,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.command.TestIfThen: Set(UsedName(VarReference,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.command.TestIfThenElse: Set(UsedName(VarReference,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe oberon.expression.AndExpression has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName($init$,[Default]), UsedName(AndExpression,[Default]), UsedName(accept,[Default]), UsedName(calculateType,[Default]), UsedName(typeCheck,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) oberon.expression.AndExpression: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) oberon.expression.AndExpression.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.expression.TestAndExpression: Set(UsedName(AndExpression,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe oberon.command.Procedure has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(accept,[Default]), UsedName(Procedure,[Default]), UsedName(args,[Default]), UsedName(typeCheck,[Default]), UsedName(name,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) oberon.command.Procedure: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) oberon.command.Procedure.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of oberon.command.TestProcedure: Set(UsedName(Procedure,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial source changes: [0m
[0m[[0m[0mdebug[0m] [0m[0m	removed:Set(/home/gcvasconcelos/Documents/UnB/2018-1/TP1/oberon/src/test/scala/oberon/command/TestFor.scala, /home/gcvasconcelos/Documents/UnB/2018-1/TP1/oberon/src/test/scala/oberon/expression/TestFunctionExpression.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0m	added: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0m	modified: Set(/home/gcvasconcelos/Documents/UnB/2018-1/TP1/oberon/src/test/scala/oberon/command/TestWhile.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated products: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mExternal API changes: API Changes: Set(NamesChange(oberon.expression.GeExpression,ModifiedNames(changes = UsedName($init$,[Default]), UsedName(accept,[Default]), UsedName(GeExpression,[Default]), UsedName(calculateType,[Default]), UsedName(typeCheck,[Default]))), NamesChange(oberon.command.Command,ModifiedNames(changes = UsedName(Command,[Default]), UsedName(typeCheck,[Default]), UsedName(accept,[Default]))), NamesChange(oberon.command.Assignment,ModifiedNames(changes = UsedName(typeCheck,[Default]), UsedName(Assignment,[Default]), UsedName(accept,[Default]))), NamesChange(oberon.expression.NotExpression,ModifiedNames(changes = UsedName($init$,[Default]), UsedName(accept,[Default]), UsedName(calculateType,[Default]), UsedName(NotExpression,[Default]), UsedName(typeCheck,[Default]))), NamesChange(oberon.expression.DivExpression,ModifiedNames(changes = UsedName($init$,[Default]), UsedName(accept,[Default]), UsedName(DivExpression,[Default]), UsedName(calculateType,[Default]), UsedName(typeCheck,[Default]))), NamesChange(oberon.expression.MultExpression,ModifiedNames(changes = UsedName($init$,[Default]), UsedName(accept,[Default]), UsedName(calculateType,[Default]), UsedName(MultExpression,[Default]), UsedName(typeCheck,[Default]))), NamesChange(oberon.expression.EqExpression,ModifiedNames(changes = UsedName($init$,[Default]), UsedName(accept,[Default]), UsedName(calculateType,[Default]), UsedName(EqExpression,[Default]), UsedName(typeCheck,[Default]))), NamesChange(oberon.expression.Function,ModifiedNames(changes = UsedName($init$,[Default]), UsedName(accept,[Default]), UsedName(calculateType,[Default]), UsedName(args,[Default]), UsedName(Function,[Default]), UsedName(typeCheck,[Default]), UsedName(name,[Default]))), NamesChange(oberon.command.Return,ModifiedNames(changes = UsedName(typeCheck,[Default]), UsedName(Return,[Default]), UsedName(accept,[Default]))), NamesChange(oberon.expression.Expression,ModifiedNames(changes = UsedName($init$,[Default]), UsedName(accept,[Default]), UsedName(calculateType,[Default]), UsedName(Expression,[Default]), UsedName(typeCheck,[Default]))), NamesChange(oberon.expression.Value,ModifiedNames(changes = UsedName(Value,[Default]), UsedName(typeCheck,[Default]), UsedName(calculateType,[Default]), UsedName(accept,[Default]))), NamesChange(oberon.expression.IntValue$,ModifiedNames(changes = UsedName(typeCheck,[Default]), UsedName(IntValue,[Default]), UsedName(calculateType,[Default]), UsedName(accept,[Default]))), NamesChange(oberon.command.IfThenElse,ModifiedNames(changes = UsedName(typeCheck,[Default]), UsedName(accept,[Default]), UsedName(IfThenElse,[Default]))), NamesChange(oberon.command.While,ModifiedNames(changes = UsedName(While,[Default]), UsedName(typeCheck,[Default]), UsedName(accept,[Default]))), NamesChange(oberon.expression.BoolValue$,ModifiedNames(changes = UsedName(typeCheck,[Default]), UsedName(calculateType,[Default]), UsedName(accept,[Default]), UsedName(BoolValue,[Default]))), NamesChange(oberon.FunctionDeclaration,ModifiedNames(changes = UsedName(accept,[Default]), UsedName(FunctionDeclaration,[Default]))), NamesChange(oberon.command.IfThen,ModifiedNames(changes = UsedName(typeCheck,[Default]), UsedName(IfThen,[Default]), UsedName(accept,[Default]))), NamesChange(oberon.expression.GrExpression,ModifiedNames(changes = UsedName($init$,[Default]), UsedName(accept,[Default]), UsedName(calculateType,[Default]), UsedName(typeCheck,[Default]), UsedName(GrExpression,[Default]))), NamesChange(oberon.expression.AddExpression,ModifiedNames(changes = UsedName($init$,[Default]), UsedName(accept,[Default]), UsedName(AddExpression,[Default]), UsedName(calculateType,[Default]), UsedName(typeCheck,[Default]))), NamesChange(oberon.expression.LeExpression,ModifiedNames(changes = UsedName($init$,[Default]), UsedName(accept,[Default]), UsedName(LeExpression,[Default]), UsedName(calculateType,[Default]), UsedName(typeCheck,[Default]))), NamesChange(oberon.command.BlockCommand,ModifiedNames(changes = UsedName(typeCheck,[Default]), UsedName(BlockCommand,[Default]), UsedName(accept,[Default]))), NamesChange(oberon.expression.OrExpression,ModifiedNames(changes = UsedName($init$,[Default]), UsedName(accept,[Default]), UsedName(calculateType,[Default]), UsedName(OrExpression,[Default]), UsedName(typeCheck,[Default]))), NamesChange(oberon.VarDeclaration,ModifiedNames(changes = UsedName(accept,[Default]), UsedName(VarDeclaration,[Default]))), NamesChange(oberon.expression.NeqExpression,ModifiedNames(changes = UsedName($init$,[Default]), UsedName(accept,[Default]), UsedName(NeqExpression,[Default]), UsedName(calculateType,[Default]), UsedName(typeCheck,[Default]))), NamesChange(oberon.expression.Undefined$,ModifiedNames(changes = UsedName(typeCheck,[Default]), UsedName(calculateType,[Default]), UsedName(accept,[Default]), UsedName(Undefined,[Default]))), NamesChange(oberon.expression.SubExpression,ModifiedNames(changes = UsedName($init$,[Default]), UsedName(accept,[Default]), UsedName(SubExpression,[Default]), UsedName(calculateType,[Default]), UsedName(typeCheck,[Default]))), NamesChange(oberon.expression.LoExpression,ModifiedNames(changes = UsedName($init$,[Default]), UsedName(accept,[Default]), UsedName(calculateType,[Default]), UsedName(LoExpression,[Default]), UsedName(typeCheck,[Default]))), NamesChange(oberon.ProcedureDeclaration,ModifiedNames(changes = UsedName(accept,[Default]), UsedName(ProcedureDeclaration,[Default]))), NamesChange(oberon.expression.VarReference,ModifiedNames(changes = UsedName($init$,[Default]), UsedName(accept,[Default]), UsedName(calculateType,[Default]), UsedName(typeCheck,[Default]), UsedName(VarReference,[Default]))), NamesChange(oberon.expression.AndExpression,ModifiedNames(changes = UsedName($init$,[Default]), UsedName(AndExpression,[Default]), UsedName(accept,[Default]), UsedName(calculateType,[Default]), UsedName(typeCheck,[Default]))), NamesChange(oberon.command.Procedure,ModifiedNames(changes = UsedName(accept,[Default]), UsedName(Procedure,[Default]), UsedName(args,[Default]), UsedName(typeCheck,[Default]), UsedName(name,[Default]))))[0m
[0m[[0m[0mdebug[0m] [0m[0mModified binary dependencies: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial directly invalidated classes: Set(oberon.command.TestWhile)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mSources indirectly invalidated by:[0m
[0m[[0m[0mdebug[0m] [0m[0m	product: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0m	binary dep: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0m	external source: Set(oberon.command.TestWhile, oberon.command.TestProcedure, oberon.expression.TestFunction, oberon.expression.TestAndExpression, oberon.command.TestAssignment, oberon.expression.TestEqExpression, oberon.expression.TestExpression, oberon.expression.TestDivExpression, oberon.expression.TestAddExpression, oberon.expression.TestSubExpression, oberon.expression.TestMultExpression, oberon.expression.TestLoExpression, oberon.command.TestDeclaration, oberon.expression.TestOrExpression, oberon.expression.TestGeExpression, oberon.expression.TestNotExpression, oberon.expression.TestLeExpression, oberon.expression.TestGrExpression, oberon.expression.TestNeqExpression, oberon.command.TestIfThen, oberon.command.TestIfThenElse)[0m
[0m[[0m[0mdebug[0m] [0m[0mAll initially invalidated classes: Set(oberon.command.TestWhile, oberon.command.TestProcedure, oberon.expression.TestFunction, oberon.expression.TestAndExpression, oberon.command.TestAssignment, oberon.expression.TestEqExpression, oberon.expression.TestExpression, oberon.expression.TestDivExpression, oberon.expression.TestAddExpression, oberon.expression.TestSubExpression, oberon.expression.TestMultExpression, oberon.expression.TestLoExpression, oberon.command.TestDeclaration, oberon.expression.TestOrExpression, oberon.expression.TestGeExpression, oberon.expression.TestNotExpression, oberon.expression.TestLeExpression, oberon.expression.TestGrExpression, oberon.expression.TestNeqExpression, oberon.command.TestIfThen, oberon.command.TestIfThenElse)[0m
[0m[[0m[0mdebug[0m] [0m[0mAll initially invalidated sources:Set(/home/gcvasconcelos/Documents/UnB/2018-1/TP1/oberon/src/test/scala/oberon/command/TestWhile.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0mRecompiling all 21 sources: invalidated sources (21) exceeded 50.0% of all sources[0m
[0m[[0m[0minfo[0m] [0m[0mCompiling 21 Scala sources to /home/gcvasconcelos/Documents/UnB/2018-1/TP1/oberon/target/scala-2.12/test-classes ...[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting org.scala-sbt:compiler-bridge_2.12:1.1.1:compile for Scala 2.12.4[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting org.scala-sbt:compiler-bridge_2.12:1.1.1:compile for Scala 2.12.4[0m
[0m[[0m[0mdebug[0m] [0m[0m[zinc] Running cached compiler 21645a93 for Scala compiler version 2.12.4[0m
[0m[[0m[0mdebug[0m] [0m[0m[zinc] The Scala compiler is invoked with:[0m
[0m[[0m[0mdebug[0m] [0m[0m	-bootclasspath[0m
[0m[[0m[0mdebug[0m] [0m[0m	/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/resources.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/rt.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/sunrsasign.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/jsse.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/jce.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/charsets.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/jfr.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/classes:/home/gcvasconcelos/.sbt/boot/scala-2.12.4/lib/scala-library.jar[0m
[0m[[0m[0mdebug[0m] [0m[0m	-classpath[0m
[0m[[0m[0mdebug[0m] [0m[0m	/home/gcvasconcelos/Documents/UnB/2018-1/TP1/oberon/target/scala-2.12/test-classes:/home/gcvasconcelos/Documents/UnB/2018-1/TP1/oberon/target/scala-2.12/classes:/home/gcvasconcelos/.ivy2/cache/org.typelevel/cats-core_2.12/jars/cats-core_2.12-1.0.1.jar:/home/gcvasconcelos/.ivy2/cache/org.typelevel/cats-macros_2.12/jars/cats-macros_2.12-1.0.1.jar:/home/gcvasconcelos/.ivy2/cache/org.typelevel/machinist_2.12/jars/machinist_2.12-0.6.2.jar:/home/gcvasconcelos/.sbt/boot/scala-2.12.4/lib/scala-reflect.jar:/home/gcvasconcelos/.ivy2/cache/org.typelevel/cats-kernel_2.12/jars/cats-kernel_2.12-1.0.1.jar:/home/gcvasconcelos/.ivy2/cache/org.scalatest/scalatest_2.12/bundles/scalatest_2.12-3.0.4.jar:/home/gcvasconcelos/.ivy2/cache/org.scalactic/scalactic_2.12/bundles/scalactic_2.12-3.0.4.jar:/home/gcvasconcelos/.ivy2/cache/org.scala-lang.modules/scala-xml_2.12/bundles/scala-xml_2.12-1.0.5.jar:/home/gcvasconcelos/.ivy2/cache/org.scala-lang.modules/scala-parser-combinators_2.12/bundles/scala-parser-combinators_2.12-1.0.4.jar[0m
[0m[[0m[0mdebug[0m] [0m[0mScala compilation took 2.918654928 s[0m
[0m[[0m[0minfo[0m] [0m[0mDone compiling.[0m
